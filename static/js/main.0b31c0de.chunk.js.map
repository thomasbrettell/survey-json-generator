{"version":3,"sources":["components/SurveyGenerator/QuestionCard.module.css","App.module.css","components/JSONOutput/JSONOutput.module.css","components/SurveyGenerator/SurveyGenerator.module.css","components/SurveyGenerator/QuestionCard.js","components/SurveyGenerator/SurveyGenerator.js","components/JSONOutput/JSONOutput.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","optionID","QuestionCard","props","currentQuestion","data","options","optionsContent","CardContent","List","dense","className","styles","disablePadding","end","Button","color","size","onClick","push","key","option_number","length","option","onUpdateQuestion","map","Fragment","ListItem","InputBase","placeholder","defaultValue","fullWidth","onChange","event","optionNumber","target","value","onUpdateOption","multiline","IconButton","filter","i","deleteOptionHandler","Divider","Card","elevation","between","Typography","variant","gutterBottom","question_number","onDeleteQuestion","even","TextField","label","question","FormControl","InputLabel","id","Select","labelId","question_type","MenuItem","SurveyGenerator","updateQuestions","updatedObject","questionsUpdated","questions","findIndex","onUpdateQuestions","deleteQuestion","questionNumber","Paper","CardHeader","titleTypographyProps","title","onUpdateTitle","body","Fab","onAddQuestion","JSONOutput","useState","open","setOpen","text","JSON","stringify","json","fontSize","Snackbar","autoHideDuration","onClose","reason","message","questionID","App","surveyJSON","setSurveyJSON","Container","disableGutters","app","maxWidth","href","rel","icon","newQuestion","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StylesProvider","injectFirst","document","getElementById"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,gBAAgB,oCAAoC,eAAe,mCAAmC,KAAO,2BAA2B,QAAU,8BAA8B,IAAM,0BAA0B,QAAU,8BAA8B,iBAAiB,qCAAqC,gBAAgB,sC,mBCAhVD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,oB,mBCAhDD,EAAOC,QAAU,CAAC,cAAc,gCAAgC,cAAc,gCAAgC,eAAe,mC,mBCA7HD,EAAOC,QAAU,CAAC,KAAO,gC,4YCoBrBC,EAAW,EAkICC,MAjIhB,SAAsBC,GAEpB,IAAIC,EAAkBD,EAAME,KA6C5B,GAAGD,EAAgBE,QACjB,IAAIC,EACF,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAMC,OAAK,EAACC,UAAWC,IAAON,QAASO,gBAAc,EAArD,UACE,qBAAKF,UAAWC,IAAOE,IAAvB,SACE,cAACC,EAAA,EAAD,CACEJ,UAAWC,IAAO,kBAClBI,MAAO,UACPC,KAAM,QACNC,QAjCZ,WACEd,EAAgBE,QAAQa,KACtB,CACEC,IAAKnB,EACLoB,cAAejB,EAAgBE,QAAQgB,OAAO,EAC9CC,OAAQ,KAEZpB,EAAMqB,iBAAiBpB,GACvBH,KAqBQ,0BAOHG,EAAgBE,QAAQmB,KAAI,SAAAF,GAAM,OACjC,eAAC,IAAMG,SAAP,WAGA,eAACC,EAAA,EAAD,WACE,qBAAKhB,UAAWC,IAAO,iBAAvB,SAAyC,oCAAOW,EAAOF,mBACvD,cAACO,EAAA,EAAD,CACEC,YAAa,eACbC,aAAa,GACbb,KAAK,QACLc,WAAS,EACTC,SAAU,SAACC,GAAD,OA5BtB,SAAwBA,EAAOC,GAC7B9B,EAAgBE,QAAQ4B,EAAa,GAAGX,OAASU,EAAME,OAAOC,MAC9DjC,EAAMqB,iBAAiBpB,GA0BQiC,CAAeJ,EAAOV,EAAOF,gBAClDiB,WAAS,IAEX,cAACC,EAAA,EAAD,CACEtB,KAAM,QACNC,QAAS,kBAzCrB,SAA6BgB,GAC3B9B,EAAgBE,QAAUF,EAAgBE,QAAQkC,QAAO,SAAAjB,GAAM,OAAEA,EAAOF,gBAAgBa,KACxF,IAAI,IAAIO,EAAI,EAAGA,IAAMrC,EAAgBE,QAAQgB,OAAQmB,IACnDrC,EAAgBE,QAAQmC,GAAGpB,cAAgBoB,EAAE,EAE/CtC,EAAMqB,iBAAiBpB,GAoCEsC,CAAoBnB,EAAOF,gBAF5C,SAIE,cAAC,IAAD,SAGJ,cAACsB,EAAA,EAAD,MAnBOpB,EAAOH,aA2BtB,OACA,eAACwB,EAAA,EAAD,CAAMjC,UAAWC,IAAO,iBAAkBiC,UAAW,EAArD,UACE,eAACrC,EAAA,EAAD,CAAaG,UAAWC,IAAOkC,QAA/B,UACE,eAACC,EAAA,EAAD,CAAYC,QAAQ,WAAWC,cAAY,EAA3C,sBACY7C,EAAgB8C,mBAE5B,cAACnC,EAAA,EAAD,CACIG,QAtFR,WACEf,EAAMgD,iBAAiB/C,EAAgB8C,kBAsFjClC,MAAO,UAFX,uBAKF,cAACR,EAAA,EAAD,UACE,sBAAKG,UAAWC,IAAOwC,KAAvB,UACE,cAACC,EAAA,EAAD,CACEC,MAAM,WACNN,QAAQ,WACRV,WAAS,EACTN,SArGR,SAA+BC,GAC7B7B,EAAgBmD,SAAWtB,EAAME,OAAOC,MACxCjC,EAAMqB,iBAAiBpB,MAqGnB,eAACoD,EAAA,EAAD,CAAaR,QAAQ,WAAWrC,UAAWC,IAAO,gBAAlD,UACE,cAAC6C,EAAA,EAAD,CAAYC,GAAG,6BAAf,2BACA,eAACC,EAAA,EAAD,CACE7B,aAAgB,GAChB8B,QAAQ,6BACRF,GAAG,uBACHJ,MAAM,gBACNtB,SArGV,SAAmCC,GACjC7B,EAAgByD,cAAgB5B,EAAME,OAAOC,MACR,oBAAlChC,EAAgByD,cACjBzD,EAAgBE,QAAU,UAEnBF,EAAgBE,QAEzBH,EAAMqB,iBAAiBpB,IAyFjB,UAOE,cAAC0D,EAAA,EAAD,CAAU1B,MAAO,GAAjB,SAAqB,0DACrB,cAAC0B,EAAA,EAAD,CAAU1B,MAAO,kBAAjB,6BACA,cAAC0B,EAAA,EAAD,CAAU1B,MAAO,eAAjB,0BACA,cAAC0B,EAAA,EAAD,CAAU1B,MAAO,cAAjB,oCAKP7B,MCpFUwD,MAzDf,SAAyB5D,GASvB,SAAS6D,EAAgBC,GACvB,IAAMC,EAAgB,YAAO/D,EAAMgE,WAEnCD,EADoB/D,EAAMgE,UAAUC,WAAU,SAAAb,GAAQ,OAAEA,EAASL,kBAAkBe,EAAcf,oBACjEe,EAChC9D,EAAMkE,kBAAkBH,GAG1B,SAASI,EAAeC,GACtB,IAAIL,EAAgB,YAAO/D,EAAMgE,WACjCD,EAAmBA,EAAiB1B,QAAO,SAAAe,GAAQ,OAAEA,EAASL,kBAAkBqB,KAChF,IAAI,IAAI9B,EAAI,EAAGA,IAAMyB,EAAiB5C,OAAQmB,IAC5CyB,EAAiBzB,GAAGS,gBAAkBT,EAAE,EAE1CtC,EAAMkE,kBAAkBH,GAG1B,OACE,eAACM,EAAA,EAAD,CAAOxB,QAAS,WAAhB,UACE,cAACyB,EAAA,EAAD,CAAYC,qBAAsB,CAAC1B,QAAQ,MAAQ2B,MAAO,qBAC1D,cAAChC,EAAA,EAAD,IACA,cAACnC,EAAA,EAAD,UACE,cAAC6C,EAAA,EAAD,CACEtB,WAAS,EACTuB,MAAO,eACPhB,WAAS,EACTN,SAjCR,SAAuBC,GACrB9B,EAAMyE,cAAc3C,EAAME,OAAOC,YAmC/B,cAACO,EAAA,EAAD,IACA,eAACnC,EAAA,EAAD,CAAaG,UAAWC,IAAOiE,KAA/B,UACG1E,EAAMgE,UAAU1C,KAAI,SAAA8B,GAAQ,OAC3B,cAAC,EAAD,CAEElD,KAAMkD,EACN/B,iBAAkBwC,EAClBb,iBAAkBmB,GAHbf,EAASnC,QAMlB,cAAC0D,EAAA,EAAD,CACE7D,KAAM,QACN+B,QAAS,WACT9B,QA7CR,WACEf,EAAM4E,iBAyCF,iC,mDCJOC,MA1Cf,SAAoB7E,GAClB,MAAwB8E,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAaA,OACE,eAACX,EAAA,EAAD,CAAO7D,UAAWC,IAAO,eAAgBoC,QAAS,WAAlD,UACE,cAACyB,EAAA,EAAD,CAAYC,qBAAsB,CAAC1B,QAAQ,MAAQ2B,MAAO,mBAC1D,cAAC,kBAAD,CAAiBS,KAAMC,KAAKC,UAAUnF,EAAMoF,MAA5C,SACE,cAAChD,EAAA,EAAD,CACE5B,UAAWC,IAAO,eAClBoC,QAAQ,YACRhC,MAAM,UACNC,KAAM,QACNC,QApBY,WAClBiE,GAAQ,IAcJ,SAOE,cAAC,IAAD,CAAcK,SAAU,cAG5B,cAACC,EAAA,EAAD,CACEP,KAAMA,EACNQ,iBAAkB,IAClBC,QAxBc,SAAC1D,EAAO2D,GACX,cAAXA,GAGJT,GAAQ,IAqBJU,QAAQ,wBAEV,cAAClD,EAAA,EAAD,IACA,qBAAKhC,UAAWC,IAAO,gBAAvB,SACGyE,KAAKC,UAAUnF,EAAMoF,YCjC1BO,EAAa,EAuDFC,MAtDf,WACE,MAAoCd,mBAAS,CAC3CN,MAAO,GACPR,UAAW,KAFb,mBAAO6B,EAAP,KAAmBC,EAAnB,KAoCA,OACE,eAACC,EAAA,EAAD,CAAWC,gBAAc,EAACxF,UAAWC,IAAOwF,IAAKC,SAAS,KAA1D,UACE,mBAAGC,KAAK,0DAA0DnE,OAAO,SAASoE,IAAI,aAAtF,SAAmG,cAAC,IAAD,CAAY5F,UAAWC,IAAO4F,SACjI,mBAAGF,KAAK,8BAA8BnE,OAAO,SAASoE,IAAI,aAA1D,SAAuE,cAAC,IAAD,CAAc5F,UAAWC,IAAO4F,SACvG,cAAC,EAAD,CACEzB,cA9BN,WACE,IAAI0B,EAAc,CAChBrF,IAAK0E,EACL5C,gBAAiB8C,EAAW7B,UAAU7C,OAAS,EAC/CiC,SAAU,IAGZ0C,GAAc,SAACS,GAAD,mBAAC,eACVA,GADS,IAEZvC,UAAU,GAAD,mBACJuC,EAAUvC,WADN,CAEPsC,SAIJX,KAgBIlB,cArCN,SAAqBD,GACnBsB,GAAc,SAACS,GAAD,mBAAC,eACVA,GADS,IACE/B,MAAOA,QAoCnBN,kBAdN,SAAyBF,GACvB8B,GAAc,SAACS,GAAD,mBAAC,eACVA,GADS,IAEZvC,UAAWA,QAYTA,UAAW6B,EAAW7B,YAExB,cAAC,EAAD,CACEoB,KAAMS,QC9CCW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,UCAdQ,IAASC,OACL,cAACC,GAAA,EAAD,CAAgBC,aAAW,EAA3B,SACE,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.0b31c0de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"question-card\":\"QuestionCard_question-card__1Gx8l\",\"input-select\":\"QuestionCard_input-select__1KUrM\",\"even\":\"QuestionCard_even__20KGE\",\"between\":\"QuestionCard_between__3WZTv\",\"end\":\"QuestionCard_end__3kxAU\",\"options\":\"QuestionCard_options___PZxv\",\"add-option-btn\":\"QuestionCard_add-option-btn__1jJEb\",\"option-number\":\"QuestionCard_option-number__1t5VN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"icon\":\"App_icon__NYH35\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"json-output\":\"JSONOutput_json-output__1pXOM\",\"copy-button\":\"JSONOutput_copy-button__2Acm3\",\"json-display\":\"JSONOutput_json-display__vyZfX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"SurveyGenerator_body__3cNuZ\"};","import React from 'react';\nimport { \n  Card, \n  CardContent, \n  TextField, \n  Select, \n  FormControl, \n  InputLabel,\n  MenuItem,\n  Button,\n  Typography,\n  List,\n  ListItem,\n  IconButton,\n  InputBase,\n  Divider\n} \nfrom '@material-ui/core';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport styles from './QuestionCard.module.css';\n\nvar optionID = 0;\nfunction QuestionCard(props) {  \n\n  let currentQuestion = props.data\n\n  function questionUpdateHandler(event) {\n    currentQuestion.question = event.target.value\n    props.onUpdateQuestion(currentQuestion)\n  }\n\n  function deleteQuestionHandler() {\n    props.onDeleteQuestion(currentQuestion.question_number)\n  }\n\n  function selectQuestionTypeHandler(event) {\n    currentQuestion.question_type = event.target.value;\n    if(currentQuestion.question_type === 'mutliple-choice') {\n      currentQuestion.options = [];\n    } else {\n      delete currentQuestion.options;\n    }\n    props.onUpdateQuestion(currentQuestion);\n  }\n\n  function addOptionHandler() {\n    currentQuestion.options.push(\n      {\n        key: optionID,\n        option_number: currentQuestion.options.length+1,\n        option: ''\n      })\n    props.onUpdateQuestion(currentQuestion);\n    optionID++;\n  }\n\n  function deleteOptionHandler(optionNumber) {\n    currentQuestion.options = currentQuestion.options.filter(option=>option.option_number!==optionNumber)\n    for(var i = 0; i !== currentQuestion.options.length; i++) {\n      currentQuestion.options[i].option_number = i+1;\n    }\n    props.onUpdateQuestion(currentQuestion);\n  }\n\n  function onUpdateOption(event, optionNumber) {\n    currentQuestion.options[optionNumber-1].option = event.target.value\n    props.onUpdateQuestion(currentQuestion);\n  }\n\n  if(currentQuestion.options) {\n    var optionsContent = (\n      <CardContent>\n        <List dense className={styles.options} disablePadding>\n          <div className={styles.end}>\n            <Button\n              className={styles['add-option-btn']}\n              color={'primary'}\n              size={'small'}\n              onClick={addOptionHandler}\n            >ADD OPTION</Button>\n          </div>\n        {currentQuestion.options.map(option => (\n          <React.Fragment\n            key={option.key}\n          >\n          <ListItem>\n            <div className={styles['option-number']}><sup>O{option.option_number}</sup></div>\n            <InputBase\n              placeholder={'Enter option'}\n              defaultValue=\"\"\n              size=\"small\"\n              fullWidth \n              onChange={(event) => onUpdateOption(event, option.option_number)}\n              multiline\n            />\n            <IconButton\n              size={'small'}\n              onClick={() => deleteOptionHandler(option.option_number)}\n            >\n              <ClearIcon />\n            </IconButton>\n          </ListItem>\n          <Divider />\n          </React.Fragment>\n        ))}\n        </List>\n      </CardContent>\n    )\n  }\n\n  return (\n  <Card className={styles['question-card']} elevation={0}>\n    <CardContent className={styles.between}>\n      <Typography variant=\"overline\" gutterBottom>\n        QUESTION {currentQuestion.question_number}\n      </Typography>\n      <Button\n          onClick={deleteQuestionHandler}\n          color={'primary'}\n        >Delete</Button>\n    </CardContent>\n    <CardContent>\n      <div className={styles.even}>\n        <TextField\n          label=\"Question\"\n          variant=\"outlined\"\n          multiline\n          onChange={questionUpdateHandler}\n        />\n        <FormControl variant=\"outlined\" className={styles['input-select']}>\n          <InputLabel id=\"questiom-type-select-label\">Question type</InputLabel>\n          <Select\n            defaultValue = {''}\n            labelId=\"questiom-type-select-label\"\n            id=\"question-type-select\"\n            label=\"Question type\"\n            onChange={selectQuestionTypeHandler}\n          >\n            <MenuItem value={''}><em>Select a question type</em></MenuItem>\n            <MenuItem value={'mutliple-choice'}>Multiple choice</MenuItem>\n            <MenuItem value={'short-answer'}>Short answer</MenuItem>\n            <MenuItem value={'long-answer'}>Long answer</MenuItem>\n          </Select>\n        </FormControl>\n      </div>\n    </CardContent>\n    {optionsContent}\n  </Card>\n  )\n}\n\n export default QuestionCard;","import { Paper, CardContent, TextField, Divider, Fab, CardHeader } from '@material-ui/core';\nimport styles from './SurveyGenerator.module.css';\n\nimport QuestionCard from './QuestionCard';\n\nfunction SurveyGenerator(props) {\n  function onUpdateTitle(event) {\n    props.onUpdateTitle(event.target.value)\n  }\n\n  function onClickHandler() {\n    props.onAddQuestion()\n  }\n\n  function updateQuestions(updatedObject) {\n    const questionsUpdated = [...props.questions];\n    const targetIndex = props.questions.findIndex(question=>question.question_number===updatedObject.question_number)\n    questionsUpdated[targetIndex] = updatedObject\n    props.onUpdateQuestions(questionsUpdated)\n  }\n\n  function deleteQuestion(questionNumber) {\n    let questionsUpdated = [...props.questions];\n    questionsUpdated = questionsUpdated.filter(question=>question.question_number!==questionNumber)\n    for(var i = 0; i !== questionsUpdated.length; i++) {\n      questionsUpdated[i].question_number = i+1\n    }\n    props.onUpdateQuestions(questionsUpdated)\n  }\n\n  return (\n    <Paper variant={'outlined'}>\n      <CardHeader titleTypographyProps={{variant:'h6' }} title={'Survey Generator'} />\n      <Divider />\n      <CardContent>\n        <TextField\n          fullWidth\n          label={'Survey title'}\n          multiline\n          onChange={onUpdateTitle}\n        />\n      </CardContent>\n      <Divider />\n      <CardContent className={styles.body}>\n        {props.questions.map(question => (\n          <QuestionCard\n            key={question.key}\n            data={question}\n            onUpdateQuestion={updateQuestions}\n            onDeleteQuestion={deleteQuestion}\n          />\n        ))}\n        <Fab\n          size={'small'}\n          variant={'extended'}\n          onClick={onClickHandler}\n        >ADD QUESTION</Fab>\n      </CardContent>\n    </Paper>\n  )\n}\n\nexport default SurveyGenerator","import {useState} from 'react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport styles from './JSONOutput.module.css';\nimport { Paper, CardHeader, Divider, IconButton, Snackbar } from '@material-ui/core';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\n\nfunction JSONOutput(props) {\n  const [open, setOpen] = useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  return (\n    <Paper className={styles['json-output']} variant={'outlined'}>\n      <CardHeader titleTypographyProps={{variant:'h6' }} title={'Generated JSON'} />\n      <CopyToClipboard text={JSON.stringify(props.json)}>\n        <IconButton\n          className={styles['copy-button']}\n          variant=\"contained\"\n          color=\"default\"\n          size={'small'}\n          onClick={handleClick}\n        >\n          <FileCopyIcon fontSize={\"small\"}/>\n        </IconButton>\n      </CopyToClipboard>\n      <Snackbar\n        open={open}\n        autoHideDuration={2000}\n        onClose={handleClose}\n        message=\"Copied to clipboard\"\n      />\n      <Divider />\n      <div className={styles['json-display']}>\n        {JSON.stringify(props.json)}\n      </div>\n    </Paper>\n  )\n}\n\nexport default JSONOutput;","import {useState} from 'react';\nimport styles from './App.module.css';\nimport { Container } from '@material-ui/core';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LanguageIcon from '@material-ui/icons/Language';\n\nimport SurveyGenerator from './components/SurveyGenerator/SurveyGenerator';\nimport JSONOutput from './components/JSONOutput/JSONOutput';\n\nvar questionID = 0;\nfunction App() {\n  const [surveyJSON, setSurveyJSON] = useState({\n    title: '',\n    questions: []\n  })\n\n  function updateTitle(title) {\n    setSurveyJSON((prevState) => ({\n      ...prevState, title: title\n    }));\n  }\n\n  function addQuestion() {\n    let newQuestion = {\n      key: questionID,\n      question_number: surveyJSON.questions.length + 1,\n      question: ''\n    }\n\n    setSurveyJSON((prevState) => ({\n      ...prevState,\n      questions: [\n        ...prevState.questions,\n        newQuestion\n      ]\n    }));\n\n    questionID++;\n  }\n\n  function updateQuestions(questions) {\n    setSurveyJSON((prevState) => ({\n      ...prevState,\n      questions: questions\n    }));\n  }\n\n  return (\n    <Container disableGutters className={styles.app} maxWidth='sm'>\n      <a href='https://github.com/thomasbrettell/survey-json-generator' target='_blank' rel=\"noreferrer\"><GitHubIcon className={styles.icon}/></a>\n      <a href='https://thomasbrettell.com/' target='_blank' rel=\"noreferrer\"><LanguageIcon className={styles.icon}/></a>\n      <SurveyGenerator\n        onAddQuestion={addQuestion}\n        onUpdateTitle={updateTitle}\n        onUpdateQuestions={updateQuestions}\n        questions={surveyJSON.questions}\n      />\n      <JSONOutput\n        json={surveyJSON}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { StylesProvider } from \"@material-ui/core/styles\";\n\nReactDOM.render(\n    <StylesProvider injectFirst>\n      <App />\n    </StylesProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}